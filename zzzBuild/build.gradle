import com.smarttrade.test.CoreTest;

buildscript {
    repositories {
        mavenLocal()
        jcenter()
	}
}

allprojects {
	apply plugin: 'java'	
	apply plugin: 'maven-publish'
	apply plugin: 'groovy'
	
	project.group = 'gradleDemo'
	project.version = '1.0.0.0'

	repositories {
		mavenLocal()
		jcenter()
	}
	
	afterEvaluate { project ->
    }

}

subprojects {
	println 'subprojects->begin: ' + project.name
	
	task testFF {
		println project.name + '@testFF'
	}
	
	tasks.whenTaskAdded { addedTask ->
		if(addedTask.name.startsWith('testF')) {
			project.afterEvaluate {
				println 'afterEvaluate@@' + project.name + ":" + addedTask.name
			}
		}
	}
		
	afterEvaluate { subproject ->
		println 'afterEvaluate@subprojects -> ' + subproject.name
	}
	
	publishing {
		publications {
	        mavenJava(MavenPublication) {
	            from components.java
	        }
		}
	}
	
	println 'subprojects->end: ' + project.name
}

publishing {
	publications {
        mavenJava(MavenPublication) {
            from components.java
        }
	}
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
}


println 'This is executed during the configuration phase.'

task configured {
    println 'configured>> This is also executed during the configuration phase.'
}

task test1 {
    doLast {
        println 'test1:doLast>> This is executed during the execution phase.'
    }
}

task testBoth {
    doFirst {
      println 'testBoth:doFirst>> This is executed first during the execution phase.'
    }
    doLast {
      println 'testBoth:doLast>> This is executed last during the execution phase.'
    }
    println 'testBoth>> This is executed during the configuration phase as well.'
}

task reportTest(type: TestReport) {
	destinationDir = file("./junit_reports")
	
	subprojects.each { project ->
		project.fileTree('build/test-results/').matching  { 
			include "*/binary"
		}.visit {FileVisitDetails details ->
			if (details.file.isDirectory() && details.file.getName().equals('binary')) { 
    			reportOn details.file 
    		}
		}
	}
}

task taskX << {
    throw new GradleException('This task fails!');
}

task taskY << {
    if (taskX.state.failure != null) {
        //here is what shoud be executed if taskX fails
        println 'taskX was failed!'
    }
}

taskX.finalizedBy taskY

import com.smarttrade.test.CoreTest;

println '@zzzTest1@'

configurations {
    //testCompile
    
    testBaseRuntime {
    	extendsFrom testRuntime
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
	compile group: 'org.apache.ant', name: 'ant', version: '1.10.3'


    testCompile 'junit:junit:4.12@jar'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    
    testBaseRuntime sourceSets.main.output, sourceSets.test.output
}

println 'zzzTest1@extProp: ' + extProp

extProp = false

println 'zzzTest1@extProp: ' + extProp

afterEvaluate { subproject ->
	println '@zzzTest1@afterEvaluate  -> ' + subproject.name
}
	

additional_sonar_coverage_exclusions = ["**/test1b/**"]

println 'Self@: ' + project.name

task testF (type: CoreTest) {
	println 'self@testF'
    classpath = configurations.testBaseRuntime
    //include '**/*TestSuite.class'
    include 'gradleDemo/test1/Test1TestSuite.class'
    //jvmArgs '-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=10999'
    skipIfNoTestFound = true
    doLast {
    	println '@zzzTest1#testF executed'
    }
}

task testF1 (type: CoreTest) {
	println 'self@testF'
    classpath = configurations.testBaseRuntime
    //include '**/*TestSuite.class'
    include 'gradleDemo/test1/Test1TestSuite.class'
    //jvmArgs '-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=10999'
    skipIfNoTestFound = true
    doLast {
    	println '@zzzTest1#testF executed'
    }
}

task testF2 (type: CoreTest) {
	println 'self@testF'
    classpath = configurations.testBaseRuntime
    //include '**/*TestSuite.class'
    include 'gradleDemo/test1/Test1bTestSuite.class'
    //jvmArgs '-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=10999'
    skipIfNoTestFound = true
    doLast {
    	println '@zzzTest1#testF2 executed'
    }
}

task AAA {
	doLast {
		println 'Hello !!!'
	}
}

import com.smarttrade.test.MyTask

task myTask(type: MyTask) {
	println 'RuntimeClasspath: ' +  sourceSets.main.runtimeClasspath.files
	println 'Runtime: ' + configurations.runtime.files
	println 'Main output: ' +  sourceSets.main.output.files
//	taskRoot.dependsOn myTask
}

gradle.afterProject {
	println 'zzzTest1:afterProject'
}

tasks.whenTaskAdded { task ->
	println 'zzzTest1:whenTaskAdded: ' + task
	println 'zzzTest1:whenTaskAdded: ' + sourceSets.main.class + ": " + sourceSets.main
	println 'zzzTest1:whenTaskAdded: ' + sourceSets.main.output.class + ": " + sourceSets.main.output
	println 'zzzTest1:whenTaskAdded: ' + "classesDirs: " + sourceSets.main.output.classesDirs.files
	println 'zzzTest1:whenTaskAdded: ' + "resourcesDir: " + sourceSets.main.output.resourcesDir
	println 'zzzTest1:whenTaskAdded: ' + '${project.buildDir}/classes/${sourceDirectorySet.name}/${sourceSet.name}'
}

afterEvaluate {
	println 'zzzTest1:afterEvaluate'
	tasks.each { 
		println 'zzzTest1:afterEvaluate task: ' + it
	}
}
println '@zzzTest1@end'

println "Test's classpath: " + project.tasks.test.classpath.files

println "Test's test java srcDirs: " + sourceSets.test.java.srcDirs
println "@BuildDir: " + getProject().getBuildDir()
println "@BuildDir#toPath: " + getProject().getBuildDir().toPath()
